---
kind: Template
apiVersion: v1
metadata:
  name: gitlab-ce
  annotations:
    iconClass: fa fa-git
    description: 'GitLab. Collaboration and source control management: code, test,
      and deploy together!'
    tags: instant-app,gitlab,VCS
labels:
  createdBy: gitlab-ce-template
parameters:
- description: The name for the application. The service will be named like the application.
  displayName: Application name.
  name: APPLICATION_NAME
  value: gitlab-ce
- description: 'Custom hostname for service routes. e.g.: <application-name>.<project>.<default-domain-suffix>'
  displayName: Gitlab instance hostname
  name: APPLICATION_HOSTNAME
  required: true
- name: GITLAB_ROOT_PASSWORD
  displayName: GitLab Root User Password
  description: Password for the GitLab 'root' user. Must be at least 8 characters
    long. Leave blank if you would rather configure the password using the website
    during first use.
- name: POSTGRESQL_USER
  displayName: PostgreSQL User
  description: Username for PostgreSQL user that will be used for accessing the database.
  generate: expression
  from: user[A-Z0-9]{3}
  required: true
- name: POSTGRESQL_PASSWORD
  displayName: PostgreSQL Password
  description: Password for the PostgreSQL user.
  generate: expression
  from: "[a-zA-Z0-9]{16}"
  required: true
- name: POSTGRESQL_ADMIN_PASSWORD
  displayName: PostgreSQL Admin User Password
  description: Password for the PostgreSQL Admin user.
  generate: expression
  from: "[a-zA-Z0-9]{16}"
  required: true
- name: POSTGRESQL_DATABASE
  displayName: PostgreSQL Database Name
  description: Name of the PostgreSQL database accessed.
  value: gitlabhq_production
  required: true
objects:
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    strategy:
      type: Rolling
      rollingParams:
        updatePeriodSeconds: 1
        intervalSeconds: 1
        timeoutSeconds: 600
        maxUnavailable: 25%
        maxSurge: 25%
      resources: {}
    triggers:
    - type: ConfigChange
    replicas: 1
    test: false
    selector:
      app: "${APPLICATION_NAME}"
      deploymentconfig: "${APPLICATION_NAME}"
    template:
      metadata:
        labels:
          app: "${APPLICATION_NAME}"
          deploymentconfig: "${APPLICATION_NAME}"
      spec:
        volumes:
        - hostPath:
            path: /var/gitlab/vol1
          name: gitlab-ce-volume-1
        - hostPath:
            path: /var/gitlab/vol2
          name: gitlab-ce-volume-2
        containers:
        - name: gitlab-ce
          image: gitlab/gitlab-ce:8.12.0-ce.0
          ports:
          - containerPort: 22
            protocol: TCP
          - containerPort: 80
            protocol: TCP
          env:
          - name: GITLAB_OMNIBUS_CONFIG
            value: external_url 'http://${APPLICATION_HOSTNAME}/'; root_pass='${GITLAB_ROOT_PASSWORD}';
              gitlab_rails['initial_root_password']=root_pass unless root_pass.to_s
              == ''; postgresql['enable']=false; gitlab_rails['db_host'] = '${APPLICATION_NAME}-postgresql';
              gitlab_rails['db_password']='${POSTGRESQL_PASSWORD}'; gitlab_rails['db_username']='${POSTGRESQL_USER}';
              gitlab_rails['db_database']='${POSTGRESQL_DATABASE}'; redis['enable']
              = false; gitlab_rails['redis_host']='${APPLICATION_NAME}-redis'; unicorn['worker_processes']
              = 2; manage_accounts['enable'] = true; manage_storage_directories['manage_etc']
              = false; gitlab_shell['auth_file'] = '/gitlab-data/ssh/authorized_keys';
              git_data_dir '/gitlab-data/git-data'; gitlab_rails['shared_path'] =
              '/gitlab-data/shared'; gitlab_rails['uploads_directory'] = '/gitlab-data/uploads';
              gitlab_ci['builds_directory'] = '/gitlab-data/builds';
          resources:
            limits:
              cpu: '1'
              memory: 2Gi
            requests:
              cpu: 500m
              memory: 1Gi
          volumeMounts:
          - name: gitlab-ce-volume-1
            mountPath: "/etc/gitlab"
          - name: gitlab-ce-volume-2
            mountPath: "/gitlab-data"
          terminationMessagePath: "/dev/termination-log"
          imagePullPolicy: IfNotPresent
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        dnsPolicy: ClusterFirst
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}-redis"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    strategy:
      type: Rolling
      rollingParams:
        updatePeriodSeconds: 1
        intervalSeconds: 1
        timeoutSeconds: 600
        maxUnavailable: 25%
        maxSurge: 25%
      resources: {}
    triggers:
    - type: ConfigChange
    replicas: 1
    test: false
    selector:
      app: "${APPLICATION_NAME}"
      deploymentconfig: "${APPLICATION_NAME}-redis"
    template:
      metadata:
        labels:
          app: "${APPLICATION_NAME}"
          deploymentconfig: "${APPLICATION_NAME}-redis"
      spec:
        volumes:
        - emptyDir:
            medium: ""
          name: gitlab-ce-volume-4
        containers:
        - name: gitlab-ce-redis
          image: redis:3.2.3-alpine
          ports:
          - containerPort: 6379
            protocol: TCP
          resources:
            limits:
              cpu: '1'
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 300Mi
          volumeMounts:
          - name: gitlab-ce-volume-4
            mountPath: "/data"
          terminationMessagePath: "/dev/termination-log"
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: false
            runAsUser: 997
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        dnsPolicy: ClusterFirst
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}-postgresql"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    strategy:
      type: Rolling
      rollingParams:
        updatePeriodSeconds: 1
        intervalSeconds: 1
        timeoutSeconds: 600
        maxUnavailable: 25%
        maxSurge: 25%
        post:
          failurePolicy: Abort
          execNewPod:
            containerName: gitlab-ce-postgresql
            command:
            - "/usr/bin/scl"
            - enable
            - rh-postgresql94
            - export PGPASSWORD='${POSTGRESQL_ADMIN_PASSWORD}'; psql -h '${APPLICATION_NAME}-postgresql'
              -U postgres -d ${POSTGRESQL_DATABASE} -c 'CREATE EXTENSION IF NOT EXISTS
              pg_trgm;'
            env:
            - name: HOME
              value: "/var/lib/pgsql"
            - name: PGDATA
              value: "/var/lib/pgsql/data/userdata"
            - name: CONTAINER_SCRIPTS_PATH
              value: "/usr/share/container-scripts/postgresql"
            volumes:
            - gitlab-ce-volume-3
      resources: {}
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - gitlab-ce-postgresql
        from:
          kind: ImageStreamTag
          name: postgresql:9.4
          namespace: openshift
    replicas: 1
    test: false
    selector:
      app: "${APPLICATION_NAME}"
      deploymentconfig: "${APPLICATION_NAME}-postgresql"
    template:
      metadata:
        labels:
          app: "${APPLICATION_NAME}"
          deploymentconfig: "${APPLICATION_NAME}-postgresql"
      spec:
        volumes:
        - emptyDir:
            medium: ""
          name: gitlab-ce-volume-3
        containers:
        - name: gitlab-ce-postgresql
          image: gitlab-ce-postgresql
          ports:
          - containerPort: 5432
            protocol: TCP
          readinessProbe:
            timeoutSeconds: 1
            initialDelaySeconds: 5
            exec:
              command:
              - "/bin/sh"
              - "-i"
              - "-c"
              - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c
                'SELECT 1'
          livenessProbe:
            timeoutSeconds: 1
            initialDelaySeconds: 30
            tcpSocket:
              port: 5432
          env:
          - name: POSTGRESQL_USER
            value: "${POSTGRESQL_USER}"
          - name: POSTGRESQL_PASSWORD
            value: "${POSTGRESQL_PASSWORD}"
          - name: POSTGRESQL_DATABASE
            value: "${POSTGRESQL_DATABASE}"
          - name: POSTGRESQL_ADMIN_PASSWORD
            value: "${POSTGRESQL_ADMIN_PASSWORD}"
          resources:
            limits:
              cpu: '1'
              memory: 512Mi
            requests:
              cpu: 300m
              memory: 300Mi
          volumeMounts:
          - name: gitlab-ce-volume-3
            mountPath: "/var/lib/pgsql/data"
          terminationMessagePath: "/dev/termination-log"
          imagePullPolicy: IfNotPresent
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        dnsPolicy: ClusterFirst
- kind: Service
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    ports:
    - name: 22-ssh
      protocol: TCP
      port: 22
      targetPort: 22
    - name: 80-http
      protocol: TCP
      port: 80
      targetPort: 80
    selector:
      app: "${APPLICATION_NAME}"
      deploymentconfig: "${APPLICATION_NAME}"
    type: ClusterIP
    sessionAffinity: None
- kind: Service
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}-redis"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    ports:
    - name: 6379-redis
      protocol: TCP
      port: 6379
      targetPort: 6379
    selector:
      app: "${APPLICATION_NAME}"
      deploymentconfig: "${APPLICATION_NAME}-redis"
    type: ClusterIP
    sessionAffinity: None
- kind: Service
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}-postgresql"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    ports:
    - name: 5432-postgresql
      protocol: TCP
      port: 5432
      targetPort: 5432
    selector:
      app: "${APPLICATION_NAME}"
      deploymentconfig: "${APPLICATION_NAME}-postgresql"
    type: ClusterIP
    sessionAffinity: None
- kind: Route
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    host: "${APPLICATION_HOSTNAME}"
    to:
      kind: Service
      name: "${APPLICATION_NAME}"
    port:
      targetPort: 80-http
